@using Microsoft.AspNetCore.WebUtilities
@inject NavbarTreeConfig tree
@inject WebpageData data


<nav class="navbar navbar-expand-lg navbar-light bg-transparent text-white">
    <a class="navbar-brand text-white" href="#">@(data.OrganisationName)</a>
  <button class="navbar-toggler  btn-close-white" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
    <span class="navbar-toggler-icon "></span>
  </button>

  <div class="collapse navbar-collapse justify-content-center" id="navbarSupportedContent">
    <ul class="navbar-nav mr-auto">
        
        @foreach(var node in tree.Pages)
        {
                @(node switch
                    {
                        NavbarTreeConfig.SimpleNode s => Button(s),
                        NavbarTreeConfig.DropdownNode d => Dropdown(d),
                        _ => throw new FormatException("Invalid page layout!")
                    }
                )
            }
    </ul>
  </div>
</nav>




@code {

    private RenderFragment Button(NavbarTreeConfig.SimpleNode n) => __builder =>
    {
    <li class="nav-item"><a class="nav-link text-white" id="uppermenu_btn" href="@(MakeUri(n))">@(n.Name)</a></li>
    };

    private RenderFragment Dropdown(NavbarTreeConfig.DropdownNode n) => __builder =>
    {
        <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle text-white" id="uppermenu_btn"  data-toggle="dropdown" href="#"  role="button" aria-haspopup="true" aria-expanded="false">@(n.Name)</a>
            <div class="dropdown-menu">
            @foreach(var o in n.Subpages)
            {
                @if(o is NavbarTreeConfig.Delimiter)
                {
                        <div class="dropdown-divider"></div>
                    }
                    else if(o is NavbarTreeConfig.SimpleNode simple)
                    {
                        <a class="dropdown-item" href="@(MakeUri(simple))">@(simple.Name)</a>
                }
            }
            </div>
        </li>
    };

    private string MakeUri(NavbarTreeConfig.SimpleNode n)
    {
        return n.Parameters.Aggregate(n.Href, (acc, p) => QueryHelpers.AddQueryString(acc, p.Name, p.Value));
    }
}
